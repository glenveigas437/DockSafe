from app.models import Vulnerability, ScanException
from app import db


class VulnerabilityMapper:
    @staticmethod
    def create_vulnerability(
        scan_id,
        cve_id,
        severity,
        package_name,
        package_version=None,
        fixed_version=None,
        description=None,
        cvss_score=None,
        cvss_vector=None,
        published_date=None,
        last_modified_date=None,
        references=None,
    ):
        vulnerability = Vulnerability(
            scan_id=scan_id,
            cve_id=cve_id,
            severity=severity,
            package_name=package_name,
            package_version=package_version,
            fixed_version=fixed_version,
            description=description,
            cvss_score=cvss_score,
            cvss_vector=cvss_vector,
            published_date=published_date,
            last_modified_date=last_modified_date,
            references=references,
        )
        db.session.add(vulnerability)
        db.session.commit()
        db.session.refresh(vulnerability)
        return vulnerability

    @staticmethod
    def get_vulnerabilities_by_scan(scan_id):
        return Vulnerability.query.filter(Vulnerability.scan_id == scan_id).all()

    @staticmethod
    def get_vulnerabilities_by_severity(scan_id, severity):
        return Vulnerability.query.filter(
            Vulnerability.scan_id == scan_id, Vulnerability.severity == severity
        ).all()

    @staticmethod
    def count_vulnerabilities_by_severity(scan_id):
        counts = (
            db.session.query(Vulnerability.severity, db.func.count(Vulnerability.id))
            .filter(Vulnerability.scan_id == scan_id)
            .group_by(Vulnerability.severity)
            .all()
        )

        result = {"CRITICAL": 0, "HIGH": 0, "MEDIUM": 0, "LOW": 0, "total": 0}

        for severity, count in counts:
            severity_upper = severity.upper()
            if severity_upper in result:
                result[severity_upper] = count
            result["total"] += count
        
        return result

    @staticmethod
    def get_vulnerability_counts(scan_id):
        """Alias for count_vulnerabilities_by_severity for backward compatibility."""
        return VulnerabilityMapper.count_vulnerabilities_by_severity(scan_id)

    @staticmethod
    def delete_vulnerabilities_by_scan(scan_id):
        """Delete all vulnerabilities for a specific scan."""
        vulnerabilities = Vulnerability.query.filter(Vulnerability.scan_id == scan_id).all()
        for vuln in vulnerabilities:
            db.session.delete(vuln)
        db.session.commit()

    @staticmethod
    def delete_vulnerabilities_by_cve_ids(scan_id, cve_ids):
        vulnerabilities = Vulnerability.query.filter(
            Vulnerability.scan_id == scan_id, Vulnerability.cve_id.in_(cve_ids)
        ).all()

        for vuln in vulnerabilities:
            db.session.delete(vuln)

    @staticmethod
    def get_active_exceptions(image_name=None):
        query = ScanException.query.filter(ScanException.is_active == True)

        if image_name:
            query = query.filter(
                db.or_(
                    ScanException.image_name == image_name,
                    ScanException.image_name.is_(None),
                )
            )

        return query.all()
